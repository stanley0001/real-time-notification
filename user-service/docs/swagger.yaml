basePath: /
definitions:
  models.CreateUserResponse:
    properties:
      status:
        type: string
      user:
        $ref: '#/definitions/models.Users'
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Following:
    properties:
      followedID:
        type: integer
      followerID:
        type: integer
    type: object
  models.Messages:
    properties:
      content:
        type: string
      status:
        type: string
      userFromId:
        type: integer
      userToId:
        type: integer
    type: object
  models.SendMessageResponse:
    properties:
      message:
        $ref: '#/definitions/models.Messages'
      status:
        type: string
    type: object
  models.Users:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: integer
      status:
        type: string
      username:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: This service manages user accounts and profiles.
  title: User Service API
  version: "1.0"
paths:
  /messages:
    post:
      consumes:
      - application/json
      description: Send a new message
      parameters:
      - description: Message
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.Messages'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SendMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Send a message
      tags:
      - messages
  /users:
    get:
      description: Get user details by id, username, or email
      parameters:
      - description: User ID
        in: query
        name: id
        type: string
      - description: User Username
        in: query
        name: username
        type: string
      - description: User Email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a user
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a user
      tags:
      - users
  /users/follow:
    get:
      description: Create a folloing entry between two users
      parameters:
      - description: User ID
        in: query
        name: id
        type: string
      - description: Follower ID
        in: query
        name: follower
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Following'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: follow user
      tags:
      - following
swagger: "2.0"
